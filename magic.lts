//
// 17-651: FSP model of a simple infusion pump
//
// ASSUMPTIONS
// - The user can choose, in the setup phase, which item of info to enter next.
// - The simple enter_value action is a simple number pad where the user enters
//   numeric values.
// - There exist 'set' and 'cancel' buttons, which are the targets of press_set
//   and press_cancel.
// - When the user turns the unit off, the unit will be in a state as if it was
//   just plugged in.
//

//
// Set of actions that the user of the LTSA tool can control in an
// animation of this model.
//
menu UserControlMenu = {
    change_settings, clear_rate, confirm_settings, connect_set,
    dispense_main_med_flow, enter_value, erase_and_unlock_line,
    flow_unblocked, sound_alarm, lock_unit, plug_in, press_cancel, 
    press_set, set_rate, silence_alarm, turn_off, unlock_unit, unplug,
    flow_blocked, turn_on, purge_air, lock_line
}

//======================
// Constants and Ranges
//======================

//
// States of the pump alarm
//
const AlarmActivated = 0    // Alarm currently active
const AlarmSilenced  = 1    // Alarm currently inactive

range AlarmStateT = AlarmActivated .. AlarmSilenced

// //
// // States of the pump settings
// //
// const ParamsNotSet = 2    // pump parameters not set yet
// const ParamsSet    = 3    // pump parameters already set

// range ParamsStateT = ParamsNotSet .. ParamsSet
const ParamsNotSet = 2
const ParamRateSet = 3
const ParamValueEntered = 4
const ParamsSet = 5
range ParamsStateT = ParamsNotSet..ParamsSet

// //
// // Locked/unlocked states of a line with respect to a pump channel
// //
// const LineUnlocked = 4  // line not locked into a pump channel 
// const LineLocked   = 5  // line locked into a pump channel

// range LineLockStateT = LineUnlocked .. LineLocked

//
// Locked/unlocked states of the pump unit
//
const UnitUnlocked = 6  // the keypad of the pump is not locked
const UnitLocked   = 7  // the keypad of the pump is locked

range UnitLockStateT = UnitUnlocked .. UnitLocked

// 
// Line indexes
// 
const LineMinIndex = 8
const LineMaxIndex = 9

range LineIndexT = LineMinIndex .. LineMaxIndex

// //
// // Line rate
// //
// const RateMin    = 0
// const RateMax    = 3

// range RateRangeT = RateMin .. RateMax

// 
// States of Power
// 
const PowerOn = 10
const PowerOff = 11
range PowerStateT = PowerOn..PowerOff

//
// Sources of Power
//
const PowerSourceAC = 12
const PowerSourceBattery = 13
const PowerSourceBatteryLow = 14
const PowerSourceNone = 15
range PowerSourceT = PowerSourceAC..PowerSourceNone

//
//  States of line connection
//
const LineNotConnected = 16
const LineConnectedSet = 17
const LineAirpurged = 18
const LineLocked = 19
range LineStateT = LineNotConnected..LineLocked

//
// Stated of flow
//
const FlowUnblocked = 20
const FlowBlocked = 21
range FlowStateT = FlowUnblocked..FlowBlocked

// Power part
POWER = POWERSYETEM[PowerOff][PowerSourceNone],
POWERSYETEM[powerState:PowerStateT][powerSource:PowerSourceT] = (
    when (powerState == PowerOn)
        turn_off -> POWERSYETEM[PowerOff][powerSource]
    |
    when (powerState == PowerOff && powerSource != PowerSourceNone) 
        turn_on -> POWERSYETEM[PowerOn][powerSource]
    |
    when (powerSource == PowerSourceAC) 
        unplug -> POWERSYETEM[powerState][PowerSourceBattery]
    |
    when (powerSource != PowerSourceAC) 
        plug_in -> POWERSYETEM[powerState][PowerSourceAC]
    |
    when (powerSource == PowerSourceBattery) 
        low_battery -> POWERSYETEM[powerState][PowerSourceBatteryLow]
    |
    when (powerSource == PowerSourceBatteryLow) 
        battery_used_up -> POWERSYETEM[PowerOff][PowerSourceNone]
).

// Unit part
UNIT = UNITOFF,
UNITOFF = (
    turn_on -> UNITSTATE[UnitUnlocked]
),
UNITSTATE[unitLock:UnitLockStateT] = (
    when (unitLock == UnitUnlocked)
        lock_unit -> UNITSTATE[UnitLocked]
    |
    when (unitLock == UnitLocked)
        unlock_unit -> UNITSTATE[UnitUnlocked]
    |
    unit_state[unitLock] -> UNITSTATE[unitLock]
    |
    turn_off -> UNITOFF
	|
	battery_used_up -> UNITOFF
).

// Line part
LINE(LineIndex=LineMinIndex) = LINEOFF[LineIndex][LineNotConnected],
LINEOFF[lineIndex:LineIndexT][lineState:LineStateT] = (
    turn_on -> LINESETUP[LineIndex][ParamsNotSet][lineState]
    |
    when (lineState == LineNotConnected) 
        connect_set -> LINEOFF[lineIndex][LineConnectedSet]
    |
    when (lineState == LineConnectedSet)
        purge_air -> LINEOFF[lineIndex][LineAirpurged]
    |
    when (lineState == LineAirpurged)
        lock_line -> LINEOFF[lineIndex][LineLocked]
	|
    when (lineState != LineNotConnected) 
        erase_and_unlock_line -> LINEOFF[lineIndex][LineNotConnected]
),
LINESETUP[lineIndex:LineIndexT][params:ParamsStateT][lineState:LineStateT] = (
    when (params == ParamsNotSet) 
        set_rate -> LINESETUP[lineIndex][ParamRateSet][lineState]
    |
    when (params == ParamRateSet)
        enter_value -> LINESETUP[lineIndex][ParamValueEntered][lineState]
    |
    when (params == ParamValueEntered)
        press_set -> LINESETUP[lineIndex][ParamsSet][lineState]
    |
    when (params == ParamRateSet || params == ParamValueEntered)
        press_cancel -> LINESETUP[lineIndex][ParamsNotSet][lineState]
	|
    when (params == ParamsSet) 
        clear_rate -> LINESETUP[lineIndex][ParamsNotSet][lineState]
    |
    when (lineState == LineNotConnected) 
        connect_set -> LINESETUP[lineIndex][params][LineConnectedSet]
    |
    when (lineState == LineConnectedSet)
        purge_air -> LINESETUP[lineIndex][params][LineAirpurged]
    |
    when (lineState == LineAirpurged)
        lock_line -> LINESETUP[lineIndex][params][LineLocked]
	|
    when (lineState != LineNotConnected) 
        erase_and_unlock_line -> LINESETUP[lineIndex][params][LineNotConnected]
    |
    when (params == ParamsSet && lineState == LineLocked) 
        confirm_settings -> INFUSION[lineIndex][UnitUnlocked][FlowUnblocked]
    |
    turn_off -> LINEOFF[lineIndex][lineState]
	|
	battery_used_up -> LINEOFF[lineIndex][lineState]
),
INFUSION[lineIndex:LineIndexT][unitLock:UnitLockStateT][flowState:FlowStateT] = (
    unit_state[UnitUnlocked] -> change_settings -> LINESETUP[lineIndex][ParamsSet][LineLocked]
    |
    when (flowState == FlowUnblocked)
        dispense_main_med_flow -> INFUSION[lineIndex][unitLock][FlowUnblocked]
    |
    when (flowState == FlowUnblocked)
        flow_blocked -> INFUSION[lineIndex][unitLock][FlowBlocked]
    |
    when (flowState == FlowBlocked)
        flow_unblocked -> INFUSION[lineIndex][unitLock][FlowUnblocked]
    |
    turn_off -> LINEOFF[lineIndex][LineLocked]
	|
	battery_used_up -> LINEOFF[lineIndex][LineLocked]
).

// Alarm part
ALARM = ALARM_OFF,
ALARM_OFF = (
    turn_on -> ALARM_STATE[AlarmSilenced]
	|
	low_battery -> ALARM_OFF
),
ALARM_STATE[alarmState:AlarmStateT] =
(
    when (alarmState == AlarmActivated)
        silence_alarm -> ALARM_STATE[AlarmSilenced]
    |
    flow_blocked -> ALARM_STATE[AlarmActivated]
    |
    medicine_empty -> ALARM_STATE[AlarmActivated]
    |
    low_battery -> ALARM_STATE[AlarmActivated]
    |
    turn_off -> ALARM_OFF
	|
	battery_used_up -> ALARM_OFF
).

||PUMP = ({line[LineIndexT]} :: POWER || forall [index:LineIndexT] line[index] : LINE || {line[LineIndexT]} :: UNIT || {line[LineIndexT]} :: ALARM) / {
	sound_alarm/line[LineIndexT].sound_alarm, 
	silence_alarm/line[LineIndexT].silence_alarm, 
	lock_unit/line[LineIndexT].lock_unit,
	unlock_unit/line[LineIndexT].unlock_unit,  
	plug_in/line[LineIndexT].plug_in, 
	unplug/line[LineIndexT].unplug,
	turn_on/line[LineIndexT].turn_on,
	turn_off/line[LineIndexT].turn_off, 
	low_battery/line[LineIndexT].low_battery
} \ {line[LineIndexT].unit_state[UnitLockStateT]}.
//change_settings, clear_rate, confirm_settings, connect_set, dispense_main_med_flow, enter_value, erase_and_unlock_line, flow_unblocked, press_cancel, press_set, set_rate, flow_blocked, purge_air, lock_line

fluent BATTERYALARMON =
	<{low_battery}, {silence_alarm, plug_in}>
fluent MEDICINEALARMON =
	<{medicine_empty}, {silence_alarm, refill_medicine}>
fluent LINEALARMON =
	<{flow_blocked}, {silence_alarm, line_unblocked}>
fluent BATTERYDEAD =
	<{battery_dead}, {charge_dead_battery}>
fluent PUMPSET =
	<{confirm_setting}, {reset_setting}>

assert NOPUMPINGWHENBATTERYDEAD =
	[](BATTERYDEAD -> !dispense_main_med_flow)
assert SETBEFOREPUMP =
	[](!PUMPSET -> !dispense_main_med_flow)
assert BATTERYALARMWILLSOUND =
	[](sound_battery_alarm -> <>BATTERYALARMON)
assert MEDICINEALARMWILLSOUND =
	[](sound_medicine_alarm -> <>MEDICINEALARMON)
assert LINEALARMWILLSOUND =
	[](sound_line_alarm -> <>LINEALARMON)

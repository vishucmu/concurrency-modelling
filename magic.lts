//
// 17-651: FSP model of a simple infusion pump
//
// ASSUMPTIONS
// - The user can choose, in the setup phase, which item of info to enter next.
// - The simple enter_value action is a simple number pad where the user enters
//   numeric values.
// - There exist 'set' and 'cancel' buttons, which are the targets of press_set
//   and press_cancel.
// - When the user turns the unit off, the unit will be in a state as if it was
//   just plugged in.
//

//======================
// Constants and Ranges
//======================

//
// States of the pump alarm
//
const AlarmActivated = 0    // Alarm currently active
const AlarmSilenced  = 1    // Alarm currently inactive

range AlarmStateT = AlarmActivated .. AlarmSilenced

//
// States of the pump settings
//
const ParamsNotSet = 2    // pump parameters not set yet
const ParamsSet    = 3    // pump parameters already set

range ParamsStateT = ParamsNotSet .. ParamsSet

//
// Locked/unlocked states of a line with respect to a pump channel
//
const LineUnlocked = 4  // line not locked into a pump channel 
const LineLocked   = 5  // line locked into a pump channel

range LineLockStateT = LineUnlocked .. LineLocked

//
// Locked/unlocked states of the pump unit
//
const UnitUnlocked = 6  // the keypad of the pump is not locked
const UnitLocked   = 7  // the keypad of the pump is locked

range UnitLockStateT = UnitUnlocked .. UnitLocked

// 
// Line indexes
// 
const LineMinIndex = 8
const LineMaxIndex = 9

range LineIndexT = LineMinIndex .. LineMaxIndex

// 
// States of Power
// 
const PowerOn = 10
const PowerOff = 11
range PowerStateT = PowerOn .. PowerOff

//
// Sources of Power
//
const PowerSourceAC = 12
const PowerSourceBattery = 13
const PowerSourceBatteryLow = 14
const PowerSourceNone = 15
range PowerSourceT = PowerSourceAC .. PowerSourceNone

// 
// Error status
//
const NoLineError = 0
const FlowBlockError = 1
const LinePinchError = 2
const MedicineUsedUpError = 4
const AllError = FlowBlockError + LinePinchError + MedicineUsedUpError
range ErrorStateT = NoLineError .. AllError

//
// Display
//
const DisplayOff = 16
const DisplayOn = 17
range DisplayStateT = DisplayOff .. DisplayOn

//
// Low battery light
//
const LowBatteryLightOff = 18
const LowBatteryLightOn = 19
range LowBatteryLightStateT = LowBatteryLightOff .. LowBatteryLightOn

//
// Set of actions that the user of the LTSA tool can control in an
// animation of this model.
//
menu UserControlMenu = {
    change_settings[LineIndexT], clear_rate[LineIndexT], confirm_settings[LineIndexT], connect_set[LineIndexT],
    dispense_main_med_flow[LineIndexT], enter_value[LineIndexT], erase_and_unlock_line[LineIndexT],
    flow_unblocked[LineIndexT], sound_alarm, lock_unit, plug_in, press_cancel[LineIndexT], 
    press_set[LineIndexT], set_rate[LineIndexT], silence_alarm, turn_off, unlock_unit, unplug,
    flow_blocked[LineIndexT], turn_on, purge_air[LineIndexT], lock_line[LineIndexT]
}

// Power part
POWER = POWERSYETEM[PowerOff][PowerSourceNone],
POWERSYETEM[powerState:PowerStateT][powerSource:PowerSourceT] = (
    when (powerState == PowerOn)
        turn_off -> POWERSYETEM[PowerOff][powerSource]
    |
    when (powerState == PowerOff && powerSource != PowerSourceNone) 
        turn_on -> POWERSYETEM[PowerOn][powerSource]
    |
    when (powerSource == PowerSourceAC) 
        unplug -> POWERSYETEM[powerState][PowerSourceBattery]
    |
    when (powerSource != PowerSourceAC) 
        plug_in -> POWERSYETEM[powerState][PowerSourceAC]
    |
    when (powerState == PowerOn && powerSource == PowerSourceBattery) 
        low_battery -> POWERSYETEM[powerState][PowerSourceBatteryLow]
    |
    when (powerState == PowerOn && powerSource == PowerSourceBatteryLow) 
        battery_used_up -> POWERSYETEM[PowerOff][PowerSourceNone]
).

// Line part
LINE(LineIndex=LineMinIndex) = LINESTATE[LineUnlocked],
LINESTATE[lineLock:LineLockStateT] = (
    when (lineLock == LineUnlocked)
        connect_set[LineIndex] -> purge_air[LineIndex] -> lock_line[LineIndex] -> LINESTATE[LineLocked]
    |
    when (lineLock == LineLocked)
        erase_and_unlock_line[LineIndex] -> LINESTATE[LineUnlocked]
    |
    when (lineLock == LineLocked)
        confirm_settings[LineIndex] -> LINEPUMP
),
LINEPUMP = (
    change_settings[LineIndex] -> LINESTATE[LineLocked]
    |
    dispense_main_med_flow[LineIndex] -> (
        dispense_not_finsihed[LineIndex] -> LINEPUMP
        |
        main_med_flow_finish[LineIndex] -> LINESTATE[LineLocked]
        |
        medicine_used_up[LineIndex] -> change_medicine[LineIndex] -> LINEPUMP
    )
    |
    flow_blocked[LineIndex] -> flow_unblocked[LineIndex] -> LINEPUMP
    |
    line_pinched[LineIndex] -> line_unpinched[LineIndex] -> LINEPUMP
).

// Infusion part
INFUSION(LineIndex=LineMinIndex) = INFUSIONOFF[ParamsNotSet],
INFUSIONOFF[params:ParamsStateT] = (
    turn_on -> INFUSIONSETUP[ParamsNotSet]
),
INFUSIONSETUP[params:ParamsStateT] = (
    when (params == ParamsNotSet)
        press_set[LineIndex] -> INFUSIONSETUP[ParamsSet]
	|
    when (params == ParamsSet)
        clear_rate[LineIndex] -> INFUSIONSETUP[ParamsNotSet]
	|
    when (params == ParamsSet) 
        confirm_settings[LineIndex] -> INFUSIONPUMP
    |
    turn_off -> INFUSIONOFF[params]
	|
	battery_used_up -> INFUSIONOFF[params]
),
INFUSIONPUMP = (
    change_settings[LineIndex] -> INFUSIONSETUP[ParamsSet]
    |
    medicine_used_up[LineIndex] -> INFUSIONSETUP[ParamsSet]
    |
    dispense_main_med_flow[LineIndex] -> INFUSIONPUMP
    |
    main_med_flow_finish[LineIndex] -> INFUSIONSETUP[ParamsNotSet]
    |
    turn_off -> INFUSIONOFF[ParamsSet]
	|
	battery_used_up -> INFUSIONOFF[ParamsSet]
).

// Alarm part
ALARM = ALARM_OFF[AlarmSilenced],
ALARM_OFF[alarmState:AlarmStateT] = (
    turn_on -> ALARM_STATE[alarmState]
    |
    flow_blocked[lineIndex:LineIndexT] -> ALARM_OFF[AlarmActivated]
    |
    medicine_used_up[lineIndex:LineIndexT] -> ALARM_OFF[AlarmActivated]
    |
    line_pinched[lineIndex:LineIndexT] -> ALARM_OFF[AlarmActivated]
),
ALARM_STATE[alarmState:AlarmStateT] =
(
    when (alarmState == AlarmActivated)
        silence_alarm -> ALARM_STATE[AlarmSilenced]
    |
    flow_blocked[lineIndex:LineIndexT] -> ALARM_STATE[AlarmActivated]
    |
    medicine_used_up[lineIndex:LineIndexT] -> ALARM_STATE[AlarmActivated]
    |
    line_pinched[lineIndex:LineIndexT] -> ALARM_STATE[AlarmActivated]
    |
    low_battery -> ALARM_STATE[AlarmActivated]
    |
    turn_off -> ALARM_OFF[AlarmSilenced]
	|
	battery_used_up -> ALARM_OFF[alarmState]
).

// User interface part
UNIT = UNITOFF,
UNITOFF = (
    turn_on -> UNITSTATE[UnitUnlocked]
),
UNITSTATE[unitLock:UnitLockStateT]= (
    when (unitLock == UnitLocked)
        unlock_unit -> UNITSTATE[UnitUnlocked]
    |
    when (unitLock == UnitUnlocked)
        lock_unit -> UNITSTATE[UnitLocked]
    |
    when (unitLock == UnitLocked) 
        dispense_main_med_flow[lineIndex:LineIndexT] -> UNITSTATE[UnitLocked]
    |
    when (unitLock == UnitUnlocked)
        set_rate[lineIndex:LineIndexT] -> (
            battery_used_up -> UNITOFF
            |
            enter_value[lineIndex] -> (
                battery_used_up -> UNITOFF
                |
                press_set[lineIndex] -> UNITSTATE[UnitUnlocked]
                |
                press_cancel[lineIndex] -> UNITSTATE[UnitUnlocked]
            )
        )
    |
    when (unitLock == UnitUnlocked)
        confirm_settings[lineIndex:LineIndexT] -> UNITSTATE[UnitLocked]
    |
    when (unitLock == UnitUnlocked)
        change_settings[lineIndex:LineIndexT] -> UNITSTATE[UnitUnlocked]
    |
    when (unitLock == UnitUnlocked)
        clear_rate[lineIndex:LineIndexT] -> UNITSTATE[UnitUnlocked]
    |
    silence_alarm -> UNITSTATE[unitLock]
    |
    when (unitLock == UnitUnlocked)
        turn_off -> UNITOFF
	|
	battery_used_up -> UNITOFF
).

ERRORDIGIT(LineIndex=LineMinIndex) = ERRORDIGITSTATE[DisplayOff][NoLineError],
ERRORDIGITSTATE[display:DisplayStateT][errorState:ErrorStateT] = (
    when (display == DisplayOff)
        turn_on -> ERRORDIGITSTATE[DisplayOn][errorState]
    |
    flow_blocked[LineIndex] -> ERRORDIGITSTATE[display][errorState | FlowBlockError]
    |
    flow_unblocked[LineIndex] -> ERRORDIGITSTATE[display][errorState & (AllError - FlowBlockError)]
    |
    line_pinched[LineIndex] -> ERRORDIGITSTATE[display][errorState | LinePinchError]
    |
    line_unpinched[LineIndex] -> ERRORDIGITSTATE[display][errorState & (AllError - FlowBlockError)]
    |
    medicine_used_up[LineIndex] -> ERRORDIGITSTATE[display][errorState | MedicineUsedUpError]
    |
    change_medicine[LineIndex] -> ERRORDIGITSTATE[display][errorState & (AllError - MedicineUsedUpError)]
    |
    when (display == DisplayOn)
        turn_off -> ERRORDIGITSTATE[DisplayOff][errorState]
    |
    when (display == DisplayOn)
        battery_used_up -> ERRORDIGITSTATE[DisplayOff][errorState]
).

LOWBATTERYLIGHT = LOWBATTERYLIGHTSTATE[DisplayOff][LowBatteryLightOff],
LOWBATTERYLIGHTSTATE[display:DisplayStateT][lowBatteryState:LowBatteryLightStateT] = (
    when (display == DisplayOff)
        turn_on -> LOWBATTERYLIGHTSTATE[DisplayOn][lowBatteryState]
    |
    plug_in -> LOWBATTERYLIGHTSTATE[display][LowBatteryLightOff]
    |
    low_battery -> LOWBATTERYLIGHTSTATE[display][LowBatteryLightOn]
    |
    when (display == DisplayOn)
        turn_off -> LOWBATTERYLIGHTSTATE[DisplayOff][lowBatteryState]
    |
    when (display == DisplayOn)
        battery_used_up -> LOWBATTERYLIGHTSTATE[DisplayOff][lowBatteryState]
).

||PUMP = (POWER || forall [index:LineIndexT] LINE(index) || forall [index:LineIndexT] INFUSION(index) || ALARM || UNIT || forall [index:LineIndexT] ERRORDIGIT(index) || LOWBATTERYLIGHT).

// 1. The pump cannot start pumping without the operator first confirming the settings on the pump.
assert SETBEFOREDISPENSE =
	(forall[lineIndex:LineIndexT] (!dispense_main_med_flow[lineIndex] U confirm_settings[lineIndex]))

// 2. Electrical power can fail at any time.
fluent ELEFAIL = <{unplug}, {plug_in}>
assert ELECTRICALFAILANYTIME =
	[]((ELEFAIL -> [](!ELEFAIL)) || (!ELEFAIL -> <> ELEFAIL))

// 3. If the backup battery power fails, pumping will not occur on any line.
fluent BATTERYDEAD =
	<{battery_used_up},  {plug_in}>
assert NODISPENSEWITHDEADBATTERY =
	[](forall[lineIndex:LineIndexT] (BATTERYDEAD -> !dispense_main_med_flow[lineIndex]))

// 4. It is always possible to resume pumping after a failure.
fluent POWERFAIL =
	<{unplug}, {plug_in}>
assert RESUMEDISPENSEPOSSIBLE =
	[] (forall[lineIndex:LineIndexT] (POWERFAIL -> <> (confirm_setting -> dispense_main_med_flow[lineIndex])))

// 5. An alarm will sound on any line failure
fluent ALARMON[lineIndex:LineIndexT] =
	<{flow_blocked[lineIndex], medicine_used_up[lineIndex], line_pinched[lineIndex]}, {silence_alarm, turn_off, battery_used_up}>
assert ALARMWILLSOUND =
	[](forall[lineIndex:LineIndexT] (ALARMON[lineIndex] -> <>(silence_alarm)))

// 6. In the absence of errors the pump will continue to pump until the treatment is finished.
fluent FLOWERROR[lineIndex:LineIndexT] =
	<{flow_blocked[lineIndex]}, {flow_unblocked[lineIndex]}>
fluent MEDICINEERROR[lineIndex:LineIndexT] =
	<{medicine_used_up[lineIndex]}, {change_medicine[lineIndex]}>
fluent PINCHERROR[lineIndex:LineIndexT] =
	<{line_pinched[lineIndex]}, {line_unpinched[lineIndex]}>
assert PUMPWILLFINISHIFNOERROR =
	[] (forall[lineIndex:LineIndexT]
		 (([]!FLOWERROR[lineIndex] && []!MEDICINEERROR[lineIndex] && []!PINCHERROR[lineIndex]) ->
	      	      <>main_med_flow_finish[lineIndex] ))

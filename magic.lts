//
// 17-651: FSP model of a simple infusion pump
//
// ASSUMPTIONS
// - The user can choose, in the setup phase, which item of info to enter next.
// - The simple enter_value action is a simple number pad where the user enters
//   numeric values.
// - There exist 'set' and 'cancel' buttons, which are the targets of press_set
//   and press_cancel.
// - When the user turns the unit off, the unit will be in a state as if it was
//   just plugged in.
//

//======================
// Constants and Ranges
//======================

//
// States of the pump alarm
//
const AlarmActivated = 0    // Alarm currently active
const AlarmSilenced  = 1    // Alarm currently inactive

range AlarmStateT = AlarmActivated .. AlarmSilenced

//
// States of the pump settings
//
const ParamsNotSet = 2    // pump parameters not set yet
const ParamsSet    = 3    // pump parameters already set

range ParamsStateT = ParamsNotSet .. ParamsSet

//
// Locked/unlocked states of a line with respect to a pump channel
//
const LineUnlocked = 4  // line not locked into a pump channel 
const LineLocked   = 5  // line locked into a pump channel

range LineLockStateT = LineUnlocked .. LineLocked

//
// Locked/unlocked states of the pump unit
//
const UnitUnlocked = 6  // the keypad of the pump is not locked
const UnitLocked   = 7  // the keypad of the pump is locked

range UnitLockStateT = UnitUnlocked .. UnitLocked

// 
// Line indexes
// 
const LineMinIndex = 8
const LineMaxIndex = 9

range LineIndexT = LineMinIndex .. LineMaxIndex

// 
// States of Power
// 
const PowerOn = 10
const PowerOff = 11
range PowerStateT = PowerOn..PowerOff

//
// Sources of Power
//
const PowerSourceAC = 12
const PowerSourceBattery = 13
const PowerSourceBatteryLow = 14
const PowerSourceNone = 15
range PowerSourceT = PowerSourceAC..PowerSourceNone

//
// States of flow
//
const FlowUnblocked = 16
const FlowBlocked = 17
range FlowStateT = FlowUnblocked..FlowBlocked

//
// Set of actions that the user of the LTSA tool can control in an
// animation of this model.
//
menu UserControlMenu = {
    change_settings[LineIndexT], clear_rate[LineIndexT], confirm_settings[LineIndexT], connect_set[LineIndexT],
    dispense_main_med_flow[LineIndexT], enter_value[LineIndexT], erase_and_unlock_line[LineIndexT],
    flow_unblocked[LineIndexT], sound_alarm, lock_unit, plug_in, press_cancel[LineIndexT], 
    press_set[LineIndexT], set_rate[LineIndexT], silence_alarm, turn_off, unlock_unit, unplug,
    flow_blocked[LineIndexT], turn_on, purge_air[LineIndexT], lock_line[LineIndexT]
}

// Power part
POWER = POWERSYETEM[PowerOff][PowerSourceNone],
POWERSYETEM[powerState:PowerStateT][powerSource:PowerSourceT] = (
    when (powerState == PowerOn)
        turn_off -> POWERSYETEM[PowerOff][powerSource]
    |
    when (powerState == PowerOff && powerSource != PowerSourceNone) 
        turn_on -> POWERSYETEM[PowerOn][powerSource]
    |
    when (powerSource == PowerSourceAC) 
        unplug -> POWERSYETEM[powerState][PowerSourceBattery]
    |
    when (powerSource != PowerSourceAC) 
        plug_in -> POWERSYETEM[powerState][PowerSourceAC]
    |
    when (powerSource == PowerSourceBattery) 
        low_battery -> POWERSYETEM[powerState][PowerSourceBatteryLow]
    |
    when (powerSource == PowerSourceBatteryLow) 
        battery_used_up -> POWERSYETEM[PowerOff][PowerSourceNone]
).

// Line part
LINE(LineIndex=LineMinIndex) = LINESTATE[LineIndex][LineUnlocked],
LINESTATE[lineIndex:LineIndexT][lineLock:LineLockStateT] = (
    when (lineLock == LineUnlocked)
        connect_set[lineIndex] -> purge_air[lineIndex] -> lock_line[lineIndex] -> LINESTATE[lineIndex][LineLocked]
    |
    when (lineLock == LineLocked)
        erase_and_unlock_line[lineIndex] -> LINESTATE[lineIndex][LineUnlocked]
    |
    when (lineLock == LineLocked)
        confirm_settings[lineIndex] -> LINEPUMP[lineIndex]
),
LINEPUMP[lineIndex:LineIndexT] = (
    change_settings[lineIndex] -> LINESTATE[lineIndex][LineLocked]
    |
    medicine_used_up[lineIndex] -> change_medicine[lineIndex] -> LINESTATE[lineIndex][LineLocked]
    |
    dispense_main_med_flow[lineIndex] -> LINEPUMP[lineIndex]
    |
    main_med_flow_finish[lineIndex] -> LINESTATE[lineIndex][LineLocked]
    |
    flow_blocked[lineIndex] -> flow_unblocked[lineIndex] -> LINEPUMP[lineIndex]
).

// Infusion part
INFUSION(LineIndex=LineMinIndex) = INFUSIONOFF[LineIndex],
INFUSIONOFF[lineIndex:LineIndexT] = (
    turn_on -> INFUSIONSETUP[LineIndex][ParamsNotSet]
),
INFUSIONSETUP[lineIndex:LineIndexT][params:ParamsStateT] = (
    when (params == ParamsNotSet)
        press_set[lineIndex] -> INFUSIONSETUP[lineIndex][ParamsSet]
	|
    when (params == ParamsSet)
        clear_rate[lineIndex] -> INFUSIONSETUP[lineIndex][ParamsNotSet]
	|
    when (params == ParamsSet) 
        confirm_settings[lineIndex] -> INFUSIONPUMP[lineIndex]
    |
    turn_off -> INFUSIONOFF[lineIndex]
	|
	battery_used_up -> INFUSIONOFF[lineIndex]
),
INFUSIONPUMP[lineIndex:LineIndexT] = (
    change_settings[lineIndex] -> INFUSIONSETUP[lineIndex][ParamsSet]
    |
    medicine_used_up[lineIndex] -> INFUSIONSETUP[lineIndex][ParamsSet]
    |
    dispense_main_med_flow[lineIndex] -> INFUSIONPUMP[lineIndex]
    |
    main_med_flow_finish[lineIndex] -> INFUSIONSETUP[lineIndex][ParamsNotSet]
    |
    turn_off -> INFUSIONOFF[lineIndex]
	|
	battery_used_up -> INFUSIONOFF[lineIndex]
).

// Alarm part
ALARM = ALARM_OFF,
ALARM_OFF = (
    turn_on -> ALARM_STATE[AlarmSilenced]
),
ALARM_STATE[alarmState:AlarmStateT] =
(
    when (alarmState == AlarmActivated)
        silence_alarm -> ALARM_STATE[AlarmSilenced]
    |
    flow_blocked[lineIndex:LineIndexT] -> ALARM_STATE[AlarmActivated]
    |
    medicine_used_up[lineIndex:LineIndexT] -> ALARM_STATE[AlarmActivated]
    |
    low_battery -> ALARM_STATE[AlarmActivated]
    |
    turn_off -> ALARM_OFF
	|
	battery_used_up -> ALARM_OFF
).

// User interface part
UNIT = UNITOFF,
UNITOFF = (
    turn_on -> UNITSTATE[UnitUnlocked]
),
UNITSTATE[unitLock:UnitLockStateT]= (
    when (unitLock == UnitLocked)
        unlock_unit -> UNITSTATE[UnitUnlocked]
    |
    when (unitLock == UnitUnlocked)
        lock_unit -> dispense_main_med_flow[lineIndex:LineIndexT] -> UNITSTATE[UnitLocked]
    |
    when (unitLock == UnitUnlocked)
        set_rate[lineIndex:LineIndexT] -> (
            battery_used_up -> UNITOFF
            |
            enter_value[lineIndex] -> (
                battery_used_up -> UNITOFF
                |
                press_set[lineIndex] -> UNITSTATE[UnitUnlocked]
                |
                press_cancel[lineIndex] -> UNITSTATE[UnitUnlocked]
            )
        )
    |
    when (unitLock == UnitUnlocked)
        confirm_settings[lineIndex:LineIndexT] -> UNITSTATE[UnitLocked]
    |
    when (unitLock == UnitUnlocked)
        change_settings[lineIndex:LineIndexT] -> UNITSTATE[UnitUnlocked]
    |
    when (unitLock == UnitUnlocked)
        clear_rate[lineIndex:LineIndexT] -> UNITSTATE[UnitUnlocked]
    |
    silence_alarm -> UNITSTATE[unitLock]
    |
    when (unitLock == UnitUnlocked)
        turn_off -> UNITOFF
	|
	battery_used_up -> UNITOFF
).

||PUMP = (POWER || forall [index:LineIndexT] LINE(index) || forall [index:LineIndexT] INFUSION(index) || ALARM || UNIT).

// 1. The pump cannot start pumping without the operator first confirming the settings on the pump.
fluent PUMPSET[lineIndex:LineIndexT] =
	<{confirm_settings[lineIndex]}, {change_setting[lineIndex], turn_off, battery_used_up}>
assert SETBEFOREDISPENSE =
	[](forall[lineIndex:LineIndexT] (PUMPSET[lineIndex] -> <>dispense_main_med_flow[lineIndex]))

// 2. Electrical power can fail at any time.
fluent ELEFAIL = <{unplug}, {plug_in}>
assert ELECTRICALFAILANYTIME =
	[]((ELEFAIL -> [](!ELEFAIL)) || (!ELEFAIL -> <> ELEFAIL))

// 3. If the backup battery power fails, pumping will not occur on any line.
fluent BATTERYDEAD =
	<{battery_used_up},  {plug_in}>
assert NODISPENSEWITHDEADBATTERY =
	[] (forall[lineIndex:LineIndexT] (BATTERYDEAD -> !dispense_main_med_flow[lineIndex]))

// 4. It is always possible to resume pumping after a failure.
fluent POWERFAIL =
	<{unplug}, {plug_in}>
assert RESUMEDISPENSEPOSSIBLE =
	[] (forall[lineIndex:LineIndexT] (POWERFAIL -> <>dispense_main_med_flow[lineIndex]))

// 5. An alarm will sound on any line failure
fluent FLOWALARMON[lineIndex:LineIndexT] =
	<{flow_blocked[lineIndex]}, {flow_unblocked[lineIndex], silence_alarm, turn_off, battery_used_up}>
fluent MEDICINEALARMON[lineIndex:LineIndexT] =
	<{medicine_used_up[lineIndex]}, {change_medicine[lineIndex], silence_alarm, turn_off, battery_used_up}>
fluent PINCHALARMON[lineIndex:LineIndexT] =
	<{pinched[lineIndex]}, {unpinched[lineIndex], silence_alarm, turn_off, battery_used_up}>
assert ALARMWILLSOUND =
	[](forall[lineIndex:LineIndexT] 
		((flow_blocked[lineIndex] || medicine_used_up[lineIndex] || pinched[lineIndex]) -> 
		     <>(FLOWALARMON[lineIndex] || MEDICINEALARMON[lineIndex] || PINCHALARMON)))

// 6. In the absence of errors the pump will continue to pump until the treatment is finished.
fluent FLOWERROR[lineIndex:LineIndexT] =
	<{flow_blocked[lineIndex]}, {flow_unblocked[lineIndex]}>
fluent MEDICINEERROR[lineIndex:LineIndexT] =
	<{medicine_used_up[lineIndex]}, {change_medicine[lineIndex]}>
fluent PINCHERROR[lineIndex:LineIndexT] =
	<{pinched[lineIndex]}, {unpinched[lineIndex]}>
assert PUMPWILLFINISHIFNOERROR =
	[] (forall[lineIndex:LineIndexT]
		 ((!FLOWERROR[lineIndex] && !MEDICINEERROR[lineIndex] && !PINCHERROR && dispense_main_med_flow[lineIndex]) ->
	      	      <>main_med_flow_finish[lineIndex] ))
